---
layout: cover
# ---

---
layout: separator
title: |
  Sometimes, your worst enemy is slowness!
image:
  url: '@common/sloth.webp'
options:
  background: fuchsia

---
layout: hello
# ---

---
layout: half
title: What do we use everyday?
content:
  - Web applications play a very important part of our lives.
  - _They must not go down!_
image:
  url: '@common/online-banking.webp'
decorations:
  logo: white

---
layout: separator
title: We are all vulnerable!
image:
  url: '@common/hacking.webp'
options:
  background: red

---
title: Denial of Service Attack
items:
  entries:
    - icon: bug
      title: Denial of Service Attack (DoS)
      text: A network resource is maliciously made unavailable to its intended users.
    - icon: circle-nodes
      title: Distributed Denial of Service (DDoS)
      text: The incoming flooding traffic originates from many different sources.
    - icon: sack-dollar
      title: In DDoS the attacker usually uses a lot of resources
      text: _Is that still true?_
notes: |
  Emphasize the **true** in the last question.

---
layout: separator
title: |
  Fear the 
  real enemy ...
image:
  url: '@common/hacking.webp'
options:
  background: pink

---
layout: image
image:
  url: '@talk/slowloris.webp'
notes: |
  Joke about: **“This talk should have been named Taming Slowlorises in Node.js”** and see people reaction.
decorations:
  logo: white

---
layout: side
title: The Slowloris attack
items:
  entries:
    - icon: bug
      title: What is it?
      text: |
        A DDoS attack which
        uses minimal bandwidth.
    - icon: calendar
      title: When it was created?
      text: |
        Robert “RSnake” Hansen
        created it in June 2009.
    - icon: arrows-split-up-and-left
      title: It’s not just HTTP!
      text: |
        This attack can be abstracted
        to similar protocols.
image:
  url: '@talk/slowloris-intro.webp'

---
layout: side
title: Normal HTTP server activity
content:
  - Each socket on the server consumes some amount of RAM and other system resources.
image:
  url: '@talk/http-1.webp'
decorations:
  number: 1

---
layout: side
title: Normal HTTP server activity
content:
  - Clients usually disconnect after receiving the response.
image:
  url: '@talk/http-2.webp'
notes: |
  Explicitly mention that this is not strictly true for Keep-Alive connections but also that legit clients disconnects very soon.
decorations:
  number: 2

---
layout: side
title: Normal HTTP server activity
content:
  - The amount of resources consumed by the server are relatively stable.
image:
  url: '@talk/http-3.webp'
decorations:
  number: 3

---
title: Retaining sockets is expensive
items:
  entries:
    - icon: microchip
      title: The operating system manages low-level operations
      text: Each socket consumes several kilobytes of RAM.
    - icon: file
      title: Each socket is backed by a file descriptor
      text: Each process has a limited number of descriptor available, managed via <code>ulimit</code>.
    - icon: globe
      title: The application manages high-level operations
      text: The application representation of the socket adds extra memory overhead.

---
layout: side
title: The Slowloris attack
content:
  - Each client never finishes a request and stays connected for the longest time possible.
image:
  url: '@talk/slowloris-1.webp'
decorations:
  number: 1

---
layout: side
title: The Slowloris attack
content:
  - As more clients connect, server resources usage constantly increases over time.
image:
  url: '@talk/slowloris-2.webp'
decorations:
  number: 2

---
layout: side
title: The Slowloris attack
content:
  - At some point server has no more free resources and cannot accept any new client.
  - _The service is interrupted!_
image:
  url: '@talk/slowloris-3.webp'
decorations:
  number: 3

---
layout: separator
title: How do we stop it?
image:
  url: '@common/wall.webp'
notes: |
  Emphasize **“How”** and **“stop it”**?
options:
  background: amber
decorations:
  logo: white

---
title: Use a reverse proxy
content:
  - Never put Node.js as the direct point of contact to the clients.<br/> Servers like Nginx have better protection from DDoS attacks.
decorations:
  icon: person-military-pointing
  className:
    icon: talk@reverse-proxy-icon

---
title: Mitigation strategies
content:
  - Distinguish between requests which are legit and requests that belong to the attack is very hard. **None of the strategies below is 100% accurate.**
items:
  entries:
    - icon: network-wired
      title: Limit connections per IP
      text: As the attack is distributed, the attacker can easily switch to another IP.
    - icon: hourglass
      title: Enforce speed or time constraints
      text: It’s hard to establish a connection which will not cut out slow legit clients.
  horizontal: true

---
layout: separator
title: What about Node.js?
image:
  url: '@common/node.webp'
options:
  background: amber
decorations:
  logo: white

---
title: http.Server.headersTimeout
items:
  entries:
    - icon: bug
      title: Partial fix as the body is not considered
      text: Node.js never parses or consume request bodies.
    - icon: handshake-angle
      title: Body handling is delegated
      text: Applications are responsible for body timeouts.
    - icon: calendar
      title: Node.js 10.14.0, November 28th, 2018
      text: <em>Node.js has been completely unprotected for 10 years.</em>
decorations:
  number: 10
  className:
    number: talk@ten-years

---
layout: side
title: Trust the frameworks
highlight:
  text: The philosophy behind this choice was to <strong class="theme@fg-amber">support</strong> serverless environments which needed long running connections.
  className: theme@bg-blue theme@fg-white
items:
  entries:
    - icon: eye-slash
      title: Disable http.Server.timeout by default
      text: The default value has been changed to nothing.
    - icon: calendar
      title: Node.js 13.0.0, October 22nd, 2019
      text: _From now on, attacker can delay transfer indefinitely._
notes: |
  * Hapi and Fastify implemented a fix.
  * Restify, Express and Koa did not.
decorations:
  logo: white

---
title: http.Server.requestTimeout
items:
  entries:
    - icon: shield
      title: Complete fix
      text: The client has now limited time to finish.
    - icon: calendar
      title: Available on all active Node.js lines
      text: Added to Node.js 14.11.0, released on September 15th, 2020.
    - icon: thumbs-down
      title: Disabled by default
      text: Adding a clock for each new request is an expensive operation.

---
layout: separator
title: Are we safe now?
image:
  url: '@common/completed.webp'
options:
  background: amber

---
layout: separator
title: Yes, almost!
image:
  url: '@common/hacking.webp'
options:
  background: gray

---
title: The countermeasures were loose
items:
  entries:
    - icon: sliders
      title: Custom configuration was needed to protect adequately
      text: The attacker could still delay data transfer forever without being rejected.
    - icon: rocket
      title: Performance was prioritized
      text: Whenever a timeout has gone off was checked only after new data was received.

---
title: How to protect Node.js 16 and below
items:
  entries:
    - icon: hourglass
      title: Make sure sockets cannot be idle
      text: <code>http.Server.timeout</code> must be greater than 0 to detect malicious idle sockets.
    - icon: lock
      title: Limit the total time for each request
      text: |
        <code>http.Server.requestTimeout</code> must be greater than 0.
    - icon: minimize
      title: Have a lower timeout for the headers
      text: <code>http.Server.headersTimeout</code> should also be set to detect a malicious client earlier.

---
layout: code
title: How to protect Node.js 16 and below
code:
  language: javascript
  content: |
    import { createServer } from 'node:http'

    const server = createServer()

    // The socket can be idle for 2 minutes before being terminated
    server.timeout = 120000

    // The entire request must be completely received by the server within 5 minutes
    server.requestTimeout = 300000

    // The request's headers must be completely received by the server within a minute
    server.headersTimeout = 60000

---
title: Node.js 18.0.0 is finally safe by default
content:
  - |
    The latest major version of Node.js has finally solved all the issues described.

    _Changing timeout handling has improved performance by 2%._
items:
  entries:
    - icon: history
      title: Request are checked periodically
      text: |
        The HTTP server regularly checks for
        requests which might have timed out.

        <br/>See the new option:
        `connectionsCheckingInterval`
    - icon: lock
      title: Have safer defaults
      text: |
        The timeouts for headers and request
        are finally enabled by default.<br/>

        <br/>_The default Node.js configuration
        now protects against SlowLoris._
  horizontal: true
notes: |
  Mention that this was possible due to semver major change and thus it will not be backported.

---
layout: separator
title: We made it!
image:
  url: '@common/turtle.webp'
notes: |
  Do a nice victory gesture and shout!
options:
  background: green
decorations:
  className:
    icon: theme-misc@mission-completed
  icon: champagne-glasses
  logo: black

---
title: Take home lessons
content:
  - What can we learn from this long journey?
items:
  entries:
    - icon: lock
      title: Security, always
      text: Always think about security implication when implementing new features or fixing bugs.
    - icon: traffic-light
      title: Sacrifice Performance
      text: Putting performance aside can drive to correct, innovative and eventually performant solutions.
    - icon: history
      title: Validate regularly
      text: During regular activities, always check the existing code for hidden flaws or vulnerabilites.
  horizontal: true
notes: |
  **Before** talking about the slides, recap what you talked about: **“Today we have seen how atypical attacks can unexpectedly affect our applications and how it can take a very long time to fix them.”**

---
layout: quote
quote:
  sentence: |
    Never assume the obvious is true.
  author: William Safire

---
layout: end
# ---

