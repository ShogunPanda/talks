---
layout: cover
# ---

---
layout: separator
title: |
  Being kind
  never hurts!
image:
  url: '@common/kindness.webp'
options:
  background: fuchsia
decorations:
  logo: black

---
layout: hello
# ---

---
title: Let’s celebrate GraphQL!
content:
  - We all know how this technology has made our life easier.
image:
  url: '@talk/graphql.webp'
  className: talk@graphql-logo

---
title: Why is it good?
items:
  entries:
    - icon: code
      title: Many resources, less overhead, expressive language
      text: You can ask for multiple resources in a single request and save network bandwidth.
    - icon: cut
      title: No overfetching or underfetching
      text: The server will return exactly the data we asked for. <em>This will return.</em>
    - icon: chart-network
      title: Federation
      text: Multiple schemas can be easily joined.

---
title: Federation
items:
  entries:
    - icon: chart-network
      title: Split the schema in subgraphs
      text: This is great for separation of concerns.
    - icon: link
      title: Integration with remote services
      text: Each subgraph is handled by a separate service, possibly remote.
    - icon: thumbs-down
      title: Only works with GraphQL service
      text: You can’t directly integrate with REST APIs or similar.

---
title: Serialization
items:
  entries:
    - icon: globe
      title: GraphQL does not enforces a serialization format
      text: Developers are free to use whatever they want to.
    - icon: tools
      title: The network stack is your choice
      text: Neither the data format or the transfer protocol are mandated by the spec.
    - icon: star
      title: Let’s face the honest truth
      text: 99% (total arbitrary) of the times we are talking about JSON data exchanged over HTTP.

---
layout: half
title: The server knows<br/>it better
content:
  - It’s relative easy to attach new data sources to the server.
  - <em class="theme@fg-blue">How to push additional data to a client that didn’t ask for it?</em>
image:
  url: '@common/server.webp'
decorations:
  logo: white

---
layout: separator
title: How to be proactive?
image:
  url: '@common/what-now.webp'
options:
  background: amber
decorations:
  logo: black

---
title: 'Happy case: we control everything'
items:
  entries:
    - index: 1
      title: Add new data to the server’s schema
      text: You should not break backward compatibility.
    - index: 2
      title: Verify the clients are still working
      text: Double checking that nothing broke is never a bad choice.
    - index: 3
      title: Update the clients
      text: Update queries in the client to use the new data.

---
layout: separator
title: Are we done?
image:
  url: '@common/happiness.webp'
options:
  background: amber

---
layout: separator
title: You already know the answer...
image:
  url: '@common/laugh.webp'
options:
  background: gray

---
title: The happy case is mostly theoretical
items:
  entries:
    - icon: globe
      title: You have to be in control of the clients
      text: You also have to consider users that don’t usually upgrade their applications often.
    - icon: camera-cctv
      title: Nothing can go out of sight
      text: If even a single component is not updated at the right time, compatibility problems will arise.
    - icon: file-certificate
      title: Specification will be broken
      text: Even if the client is able to handle data it didn’t ask for, <em>we are breaking the specification</em>.

---
layout: raw
content:
  - |
    <h1 class="theme@fg-black theme-misc@bad__text">BAD!</h1>
    <h1 class="theme@fg-white theme-misc@bad__text">DON'T!</h1>
className:
  raw: theme-misc@bad
  root: theme-misc@bad__root
options:
  background: red
decorations:
  logo: white
  permalink: white

---
layout: separator
title: Do we have a choice?
image:
  url: '@common/alternatives.webp'
options:
  background: amber
decorations:
  logo: white

---
layout: separator
title: |
  Yes, let's make
  an <span class="theme@fg-amber">enriching</span>
  proxy!
image:
  url: '@common/san-bernardo.webp'
options:
  background: green
decorations:
  logo: black

---
title: Check it out!
content:
  - We can reuse parsing and serialization from the reference GraphQL Javascript implementation.
  - qr: https://github.com/ShogunPanda/graphql-enrich-proxy
  - <span class="theme-misc@qr__footer">[https://github.com/ShogunPanda/graphql-enrich-proxy](https://github.com/ShogunPanda/graphql-enrich-proxy)</span>
className:
  qr: theme-misc@qr--big

---
title: How it works
items:
  entries:
    - index: 1
      title: Analyze the query
      text: Parse and validate the query received by the client. In case of request error, stop here.
    - index: 2
      title: Ensure types information with temporary modifications
      text: Each selection set must contain the type to give all information to the enriching handler.
    - index: 3
      title: Execute the query
      text: This can be done directly on the server or we can create an enriching GraphQL proxy server.
    - index: 4
      title: Fetch the additional data
      text: Using a tree traversal algorithm, fetch additional data for each field according to the handler.
    - index: 5
      title: Enrich the response
      text: Store the additional data in the extensions field, using the JSONPath selector as the key.
  gap: false

---
title: Meet GraphQL extensions
content:
  - The `extensions` field is already documented in the specification and it's perfect to ensure both compatibility and expandability.
items:
  entries:
    - icon: code
      title: Extensions are for developers
      text: The specification states that the field is reserved for developers.
    - icon: code-fork
      title: Existing clients will ignore them
      text: Unaware clients will ignore the field and the server is still specification compliant.
  horizontal: true

---
layout: code
title: Overview
code:
  language: javascript
  highlight: '2'
  content: |
    import fastify from 'fastify'
    import { parse, print, visit } from 'graphql/language/index.js'

    /* ... */

    server.post('/graphql', async function handleQuery(req, reply) {
      // Step 1: Parse the query and check for syntax error
      const document = parse(req.body.query)

      // Step 2: Add types information to the query
      const [enrichedAst, enrichedId] = addTypesInformation(document)

      // Step 3: Execute the query on the upstream
      const response = await graphql('https://api.geographql.rudio.dev', print(enrichedAst))

      // Step 4 and 5: Execute the enriching handler to fetch additional data
      const extensions = await enrich(response.data, enrichedId, addWeatherInformation)

      // Return to the client
      return { ...response, extensions: { ...response.extensions, ...extensions }}
    })

---
layout: side
title: Leveraging types
content:
  - We make sure `__typename` is in all selection sets so we can easily parse the response.
items:
  entries:
    - icon: tools
      title: The added fields are temporary
      text: Never return these to the client.
    - icon: code-compare
      title: Leverage field aliasing
      text: Use it to easily spot the fields added.
code:
  language: graphql
  highlight: 3, 6, 9
  content: |
    query test {
      hero {
        __typename
        name
        friends {
          __enriched: __typename
          name
          homeglobe {
            aliasedType: __typename
            __enriched: __typename
            name
            climate
          }
        }
      }
    }

---
layout: side
title: Ensuring type information
content:
  - The visit API and the AST from the GraphQL reference implementation makes our life very easy.
code:
  language: javascript
  highlight: 10, 14, 17, 23
  content: |
    function injectedTypeField(id) {
      return {
        kind: 'Field',
        alias: { kind: 'Name', value: id },
        name: { kind: 'Name', value: '__typename' }
      }
    }

    function addTypesInformation(document) {
      const injectedFieldId = `enrichType_${Date.now()}`
      const injectedField = injectedTypeField(injectedFieldId)

      const updatedDocument = visit(document, {
        SelectionSet(node) {
          // Check if the type is already included unaliased
          for (const f of node.selections) {
            if (f.name.value === '__typename' && !f.alias) {
              return
            }
          }

          // If we got there, we still have to add the typename
          node.selections.unshift(injectedField)
          return node
        }
      })

      return [updatedDocument, injectedFieldId]
    }
  className:
    root: theme-misc@code--small
decorations:
  logo: white
  permalink: black-with-bg

---
title: Cache the queries
content:
  - Parsing and executing GraphQL is expensive. Cache them when possible.
items:
  entries:
    - icon: cloud-upload
      title: Cache the original query…
      text: This also includes invalid queries as it will speed up the handling of misbehaving clients.
    - icon: code-compare
      title: …and the enriched query
      text: Traversing a complex query to ensure types information can be time consuming.
  horizontal: true

---
layout: separator
title: Let me introduce two friends...
options:
  background: sky
decorations:
  logo: black

---
title: Depth first tree traversal
image:
  url: '@talk/tree.webp'

---
layout: side
title: JSONPath
content:
  - It is a string syntax for selecting and extracting values within a JSON value.
items:
  entries:
    - icon: star
      title: Well known
      text: You are already using JSONPath or a similar syntax.
    - icon: tools
      title: Easily implementable
      text: The syntax is easy to understand and implement.
code:
  language: output
  numbers: false
  content: |
    shogun@panda:~/example$ cat example.json
    {
      "countries": [
        { "name": "Iceland", capital: "Reykjavík", },
        { "name": "Italy", capital: "Roma" }
      ]
    }

    shogun@panda:~/example$ jq ".countries[1].capital" example.json
    "Roma"

---
layout: separator
title: ... and now the show goes on!
options:
  background: sky
decorations:
  permalink: black

---
layout: side
title: Enrich the data
content:
  - We traverse the upstream response, executing the handler on each node.
  - If data is returned from the handler, we append to the extension using JSONPath.
code:
  language: javascript
  highlight: 4, 8, 18, 22
  content: |
    async function enrich(data, enrichedId, handler) {
      const extensions = {}

      await traverse(data, async function (value, path) {
        // Execute the handler on the node
        // and eventually add the returned data
        const additional = await handler(
          value.__typename || value[enrichedId],
          path,
          value
        )

        if (additional) {
          const jsonPath = path
            .join('.')
            .replace(/\.(\d+)\./g, '[$1].')

          extensions[jsonPath] = additional
        }

        // Make sure we remove any fields we added
        value[enrichedId] = undefined
      })

      return extensions
    }
decorations:
  logo: white
  permalink: black-with-bg

---
layout: side
title: Tree traversal
content:
  - Implementing a depth first tree traversal is quite easy when using recursion.
code:
  language: javascript
  highlight: 5, 9, 14, 17, 21
  content: |
    async function traverse(current, path, visitor) {
      // This is to handle the initial call
      if (typeof path === 'function') {
        visitor = path
        path = ['$']
      }

      // First of all, call the visitor on the current object
      await visitor(current, path)

      // For each enumerable property in the object,
      // perform a depth first traverse of the property
      // if it is an array of objects or an object.
      for (const [key, val] of Object.entries(current)) {
        if (Array.isArray(val)) {
          for (let i = 0; i < val.length; i += 1) {
            await traverse(val[i], path.concat(key, i), visitor)
          }
          // Say thanks to JS typing for the null checking
        } else if (typeof val === 'object' && val !== null) {
          await traverse(val, path.concat(key), visitor)
        }
      }
    }
decorations:
  permalink: black-with-bg

---
layout: side
title: Fetch additional data
content:
  - Using the type and/or the path we can choose whether the node needs additional data.
code:
  language: javascript
  highlight: 2, 7, 16, 18
  content: |
    async function addWeatherInformation(type, path, value) {
      if (type !== 'City') {
        return
      }

      // Get weather information for today for the city
      const response = await undici.request(
        'https://goweather.herokuapp.com',
        {
          method: 'GET',
          path: `/weather/${value.name}`,
          dispatcher: agent
        }
      )

      const body = JSON.parse(await getStream(response.body))

      return response.statusCode === 200
        ? { temperature: body.temperature }
        : {
            error: {
              statusCode: response.statusCode,
              body
            }
          }
    }
decorations:
  logo: white
  permalink: black-with-bg

---
layout: separator
title: Only an example can enlighten us!
image:
  url: '@common/sun.webp'
options:
  background: blue
decorations:
  permalink: black-with-bg

---
layout: code
title: Input query
code:
  language: graphql
  highlight: 3, 7
  content: |
    {
      country(iso2: "US") {
        aliasedType: __typename
        name
        cities(page: {first: 2}) {
          __typename
          edges {
            node {
              name
            }
          }
        }
      }
    }

---
layout: code
title: Query executed from the upstream
code:
  language: graphql
  highlight: 2, 4, 11, 13
  content: |
    {
      enrichType_1677506561773: __typename
      country(iso2: "US") {
        enrichType_1677506561773: __typename
        aliasedType: __typename
        name
        cities(page: {first: 2}) {
          __typename
          edges {
            enrichType_1677506561773: __typename
            node {
              enrichType_1677506561773: __typename
              name
            }
          }
        }
      }
    }

---
layout: side
title: Upstream response
content:
  - It contains the enriched type information that will be removed from the final response.
code:
  language: jsonc
  highlight: 3, 5, 12, 14, 19, 21
  content: |
    {
      "data": {
        "enrichType_1677506561773": "Query",
        "country": {
          "enrichType_1677506561773": "Country",
          "aliasedType": "Country",
          "name": "United States",
          "cities": {
            "__typename": "CityConnection",
            "edges": [
              {
                "enrichType_1677506561773": "CityEdge",
                "node": {
                  "enrichType_1677506561773": "City",
                  "name": "Abbeville"
                }
              },
              {
                "enrichType_1677506561773": "CityEdge",
                "node": {
                  "enrichType_1677506561773": "City",
                  "name": "Alabaster"
                }
              }
            ]
          }
        }
      }
    }
  className:
    root: theme-misc@code--small
decorations:
  permalink: black-with-bg

---
layout: side
title: Proxy response (1/2)
content:
  - The client will receive the original data requested ...
code:
  language: jsonc
  content: |
    {
      "data": {
        "country": {
          "aliasedType": "Country",
          "name": "United States",
          "iso": "US",
          "cities": {
            "__typename": "CityConnection",
            "edges": [
              {
                "node": {
                  "name": "Abbeville"
                }
              },
              {
                "node": {
                  "name": "Adamsville"
                }
              }
            ]
          }
        }
      },
      "extensions": {
        /* ... */
      }
    }
decorations:
  permalink: black-with-bg

---
layout: side
title: Proxy response (2/2)
content:
  - ...and all our enriched data is in the extensions field.
code:
  language: jsonc
  highlight: 6, 9
  content: |
    {
      "data": {
        /* ... */
      },
      "extensions": {
        "$.country.cities.edges[0].node": {
          "temperature": "+5 °C"
        },
        "$.country.cities.edges[1].node": {
          "error": {
            "statusCode": 404,
            "body": {
              "message": "NOT_FOUND"
            }
          }
        }
      }
    }
decorations:
  permalink: black-with-bg

---
layout: separator
title: Mission completed!
image:
  url: '@common/completed.webp'
options:
  background: green
decorations:
  icon: party-horn
  className:
    icon: theme-misc@mission-completed

---
title: Take home lessons
content:
  - What can we learn from this long journey?
items:
  entries:
    - icon: file-certificate
      title: Read the specification
      text: The specifications are formal and verbose but they <em>might already contain what you need</em>.
    - icon: list-check
      title: Be compliant
      text: Even if peers are lenient with specification break, they might stop at any time. <em>Don’t risk!</em>
    - icon: search
      title: Analyse the environment
      text: Even if you develop the experience end to end, you will never be able to <em>cannot control everything</em>.
  horizontal: true

---
layout: quote
quote:
  sentence: |
    You are remembered for
    the rules you break.
  author: Douglas MacArthur

---
layout: end
# ---

