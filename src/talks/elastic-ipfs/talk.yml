---
config:
  theme: nearform
  dimensions:
    width: 2000
    height: 1120
  url: https://talks.cowtech.it
document:
  title: Horizontal Scaling of a Web3 system to the sky and beyond in AWS
  author:
    name: Paolo Insogna
    descriptionShort: Staff Node.js Core and DX Engineer
    description: |
      Staff Node.js Core and
      Developer Experience Team
    email: paolo.insogna@nearform.com
    twitter: p_insogna
    github: ShogunPanda
  company:
    count: 300
    npm:
      monthly: 1B
      percentage: 8%
slides:
  - layout: cover
  - layout: separator
    title: |
      All you need to succeed
      is love!
    image: '@talk/love.webp'
    classes:
      slide: bg-nf-orange-split
  - layout: hello
  - layout: hiring
  - title: IPFS (InterPlanetary FileSystem)
    content: A protocol designed with the intention to preserve and grow humanity's knowledge by making the web upgradeable, resilient, and more open.
    image: '@talk/ipfs.webp'
  - title: web3.storage
    content: A service that makes storing files on IPFS easier and more accessible for non-technical people.
    image: '@talk/web3-storage.svg'
    classes:
      image: w-5sp
  - layout: side
    title: Content Identifier
    content:
      - A CID uniquely identifies a chunk of data in IPFS and provides informations on how to verify the integrity of the data.
      - It does not contain any information about the location.
    image: '@talk/cid.webp'
  - title: Content Archives
    content: The CAR file format is optimized for sequential reading and it's essentially a concatenation of blocks delimited using byte length prefixes.
    code:
      language: markdown
      numbers: false
      content: |
        | ---------- Header --------- | | ------------------------ Data ----------------------- |
        |                             | |                                                       |
        | [ varint | DAG-CBOR block ] | | [ varint | CID | block ] [ varint | CID | block ] ... |
  - layout: image
    title: What was wrong?
    image: '@talk/obstacle.webp'
  - title: Previous Challenges
    items:
      - icon: world
        title: Increasing traffic
        text: The original implementation struggled to handle the massive daily upload traffic.
      - icon: user-plus
        title: Hard to scale
        text: New nodes could not be quickly added on-demand due to the long bootstrap phase.
    options:
      horizontal: true
  - layout: image
    title: The Problem
    image: '@theme/questions.webp'
  - layout: quote
    title: One simple question
    sentence: How can we use AWS services to make the service horizontally scalable with no limits?
    options:
      icons: false
      light: true
  - title: Goals
    items:
      - icon: user-plus
        title: Handle growth
        text: The system should be able to handle the massive amount of data uploaded on web3.storage.
      - icon: device-floppy
        title: Stateless services
        text: Having stateless services helps horizontal scaling and greatly improves fault tolerance.
      - icon: cloud
        title: Cloud based
        text: The entire architecture should leverage any modern cloud services and try to be affordable.
    options:
      horizontal: true
  - layout: image
    title: The Solution
    image: '@talk/solution.webp'
  - layout: side
    title: Hi, I'm Elastic IPFS!
    content:
      - The architecture is divided into three independent and stateless subsystems.
      - New nodes can be added or remove at any time, global replication can be easily achieved.
      - <span class="font-size-0_9em">[https://github.com/elastic-ipfs/elastic-ipfs](https://github.com/elastic-ipfs/elastic-ipfs)</span>
    image: '@talk/eipfs-architecture-complete.webp'
  - title: E-IPFS is democratic and cloud agnostic
    items:
      - icon: world
        title: No vendor lock-in
        text: The AWS implementation is just the first implementation and it can also serve as reference implementation for testing.
      - icon: source-code
        title: Generic components
        text: As long as you have object storage, queueing and serverless systems, you can adapt and deploy E-IPFS.
      - icon: users
        title: The DevOps are your limit
        text: Mixed or on-premise approach are also possible, but be gentle with the people responsible to maintain the infrastructure.
  - title: CARs Table Item
    content: It contains information about indexed CAR files, including the S3 full path.
    code:
      language: typescript
      content: |
        interface Car {
          path: string
          bucket: string
          bucketRegion: string
          createdAt: Date
          fileSize: number
          key: string
          roots: Array<string>
          version: number
        }
  - title: Blocks Tables Item
    content: It stores the multihash and the type of the block, used for debugging.
    code:
      language: typescript
      content: |
        interface Block {
          multihash: string
          createdAt: Date
          type: 'raw' | 'dag-cbor' | 'dag-json'
        }
  - layout: side
    title: |
      <span class="whitespace-nowrap">Blocks Position Item</span>
    content: It is the most important table in the architecture, as it links blocks to CARs, including offset and length.
    code:
      language: typescript
      content: |
        interface BlockToCars {
          blockmultihash: string
          carpath: string
          length: number
          offset: number
        }
  - layout: separator
    title: Indexing subsystem
    classes:
      slide: bg-nf-orange-split
  - title: Overview
    image: '@talk/eipfs-architecture-indexing.webp'
  - title: Indexing flow
    items:
      - index: 1
        title: CAR file is copied to S3
        text: The event is recorded on a SQS topic which will later trigger Indexing Lambda executions.
      - index: 2
        title: Indexing Lambda executes
        text: The Lambda processes the CAR file and copies all the relevant informations in the DynamoDB tables showed earlier.
      - index: 3
        title: Blocks are enqueued for publishing
        text: For each block encountered in the CAR file, the Indexer Lambda enqueues its multihash in a SQS topic which will later trigger Publishing Subsystem execution.
  - title: Bye, Idempotence!
    items:
      - icon: bug
        title: The Lambda was idempotent
        text: It required lots of additional reads on DynamoDB and made batching unavailable.
      - icon: rocket
        title: Indexing has very low failure rate
        text: Idempotence was removed as indexing rarely failed and this brought big performance gain.
    options:
      horizontal: true
  - layout: separator
    title: Let's talk about DHT
    classes:
      slide: bg-nf-orange-split
  - title: DHT Challenges
    content: IPFS uses the Kademlia DHT for keeping peers and blocks information.
    items:
      - icon: affiliate
        title: The Elastic IPFS claims to be a single node
        text: Even though internally a lot of resources are used, only one <code>PeerID</code> is used.
      - icon: network-off
        title: No long connection
        text: E-IPFS cannot directly participate to the DHT since it is not capable to connect to GossipSub.
      - icon: sos
        title: Not self sufficient
        text: In order to advertise content, the E-IPFS systems needs external auxiliary systems.
  - title: Hydra Nodes
    content: The Hydra nodes speed up looking up content in the DHT.
    items:
      - icon: search
        title: When
        text: Hydra nodes are created to have an high chance to incur into one of them when looking up data.
      - icon: affiliate
        title: What
        text: Content Routing Delegation via shared storage and third party systems as the Indexer Nodes.
      - icon: world
        title: Where
        text: The Hydra nodes are distributed in the DHT sense, not the geographical one.
    options:
      horizontal: true
  - title: Indexer Nodes
    content: A system which maps CID to content providers via libp2p or HTTP API.
    image: '@talk/indexer-node.webp'
  - title: What API shall we use?
    content: E-IPFS uses the HTTP API as GossipSub is not viable for the reasons below.
    items:
      - icon: moneybag
        title: E-IPFS is on the cloud
        text: Maintaining long living connection, when possible, is expensive.
      - icon: messages
        title: GossipSub is verbose
        text: A lot of data is exchanged and it will impact costs as well.
      - icon: git-fork
        title: libp2p optimization conflict
        text: Destination host joins multiple streams with the same <code>PeerID</code>.
    options:
      horizontal: true
  - title: How does HTTP ingestion work?
    content: The HTTP Ingest API make the Indexer Nodes choose when to sync.
    items:
      - icon: cloud-upload
        title: Upload new advertisements and entries data
        text: The data must available over HTTP.
      - icon: link
        title: Advertisements are strictly ordered
        text: Each is linked to the previous one. The <code>/head</code> one is regularly updated.
      - icon: phone-outgoing
        title: Notify Indexers on <code>/ingest/announce</code> when ready to be queried
        text: <code>HTTP PUT</code> requests will signal that new data has been published.
  - title: What will the Indexer Node will do?
    content: When ready, the Indexer Node will sync via the HTTP server.
    items:
      - index: 1
        title: Fetch the latest <code>/head</code> URL
        text: It contains the latest advertisement data CID.
      - index: 2
        title: Fetch the advertisement data and its related entries data.
        text: All the data we are interested into is in these files.
      - index: 3
        title: Repeat the flow
        text: Stop when reaching an already indexed advertisement or the tail of the chain.
  - title: Head file
    content: The <code>/head</code> just maintains a link to the latest advertisement.
    code:
      language: json
      highlight: '3'
      content: |
        {
          "head": {
            "/" : "bagugeeragtbtgeb2iulx2zihnymysaebais6ysziefwih66tyc7pupns2bma"
          },
          "pubkey": {
            "/": {
              "bytes" : "CAASpgIwgg ... 9bAgMBAAE="
            }
          },
          "sig": {
            "/": {
              "bytes": "hq9N33rQSZ ... BSHcoQLcbw=="
            }
          }
        }
  - title: |
      <span class="whitespace-nowrap">Advertisement file</span>
    content: It contains information about storage provider and entries.
    code:
      language: json
      highlight: 2, 7, 12, 14
      content: |
        {        
          "Addresses" : ["/dns4/peer.ipfs-elastic-provider-aws.com/tcp/3000/ws"],
          "ContextID": { 
            "/": { "bytes": "YmFndXF1ZXJ . .. dpdnhyYQ==" } 
          },
          "Entries": {
            "/" : "bagugeeraijghexgvdvLuk3pwd6axbvzcajhd3pylz7sm3sfaitc7lnwivxra"
          },
          "IsRm": false,
          "Metadata": { "/": { "bytes": "gBI" } },
          "PreviousID": {
            "/" : "bagugeeraii6bahmbnnijhakhyscrlkcblwpwdvahzt53vzhd2jfryj43ebag"
          },
          "Provider": "bafzbeibhqavlasjc7dvbiopygwncnrtvjd2xmryk51aib7zyjor6kf3avm"
          "Signature": { "/": { "bytes": "CqsCCAASpg ... y/yqKWQ" } }
        }
  - title: Entries file
    content: Is is just a list of CIDs made available by the provider.
    code:
      language: json
      highlight: 4, 7, 10
      content: |
        {
          "Entries": [
            {
              "/" : { "bytes": "EiCvOxoqEOhmarwWow7nY+bw2JL6SiLEYigT400EnBMeZA==" }
            },
            {
              "/" : { "bytes": "EiBOIwugRMRrvV3LFB7i3ixzaY5XTBASznCwwTWIu9Mx3g==" }
            },
            {
              "/" : { "bytes": "EiDc5NKXBT8ZSNfLDhTs2+72ZZ94qfruS]QEfJVM70XB6w==" }
            }
          ]
        }
  - layout: separator
    title: Publishing subsystem
    classes:
      slide: bg-nf-orange-split
  - title: Overview
    image: '@talk/eipfs-architecture-publishing.webp'
  - title: Concurrency Problem
    content: Handle the huge load without losing data is challenging.
    items:
      - icon: cloud-upload
        title: Several millions of blocks are uploaded every day
        text: The ingestion queue can easily explode.
      - icon: lock-square
        title: No advertisement can be lost
        text: If data is not correctly received by the Indexer, it will be unreachable.
      - icon: traffic-lights
        title: The head of the queue must be updated atomically
        text: Concurrency control must be applied to the processors.
  - layout: image
    title: What now?
    image: '@talk/dont-panic.webp'
  - layout: side
    title: Publishing flow
    content: The solution was to split the publishing process into two steps in order to reduce the size of the problem.
    highlight: The resulting subsystem is capable to easily advertise <em>a billion blocks per day</em>.
    logo: white
    items:
      - index: 1
        title: Group indexed blocks into entries file
        text: Concurrency is not limited as order does not matter.
      - index: 2
        title: Assign entries to ads, then update the head
        text: Concurrency is limited to <strong>1</strong>, with <strong>10000</strong> advertisement sent per execution.
    classes:
      highlight: bg-nf-neon-blue text-white
    options:
      highlightWidth: 4
  - layout: separator
    title: Peer subsystem
    classes:
      slide: bg-nf-orange-split
  - title: Overview
    image: '@talk/eipfs-architecture-peer.webp'
  - title: Peer subsystem characteristic
    items:
      - icon: affiliate
        title: Fully automatic
        text: The subsystem is an autoscaling EKS Node.js cluster managed by an Elastic Load Balancer.
      - icon: cloud
        title: Stateless and lean
        text: Searches for blocks on DynamoDB and leverages plain HTTP Byte-Range on S3 for serving.
      - icon: scissors
        title: Simplified BitSwap
        text: No external data is fetched, allowing to remove wantlists and ledgers management from the architecture.
    options:
      horizontal: true
  - layout: separator
    title: How does E-IPFS perform?
    classes:
      slide: bg-nf-orange-split
  - title: Hit rate went almost to 100%
    content: The graph shows the hit-rate across <em>200TB</em> of data.
    image: '@talk/hit-rate.webp'
  - title: The average indexing time has dropped
    image: '@talk/indexing-time.webp'
  - title: Give me the numbers!
    content: Here are the numbers after <em>six months</em> in production.
    items:
      - index: 180M
        title: CARs
      - index: 16B
        title: Blocks
      - index: 24B
        title: Blocks to Cars
    options:
      horizontal: true
  - title: Take home lessons
    content: What can we learn from this long journey?
    items:
      - icon: heart
        title: K.I.S.S.
        text: IPFS protocols are very complex. Simplifying is the only way to have viable products.
      - icon: world-www
        title: HTTP is not dead yet
        text: New protocols are very fashionable, but sometimes going back to good old HTTP can be very performant.
      - icon: affiliate
        title: Democracy is good
        text: Being unable to lock in a single cloud provider led to flexible and lean architecture.
    options:
      horizontal: true
  - layout: quote
    sentence: Keep your eyes on the stars, and your feet on the ground.
    author: Theodore Roosevelt
  - layout: questions
  - layout: end
